@page "/"
@using ZooManager
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<style>
    body {
        background-color: aliceblue;
    }
    h1{
        font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-size:36px;
        color:mediumslateblue;
    }

    h5 {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-size: 36px;
        color: mediumslateblue;
        text-align:center;
    }
    h3 {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-size: 32px;
        color: #3388bb;
    }

    h4 {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-size: 28px;
        color: darkcyan;
    }

    p {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-size: 24px;
        color: blueviolet
    }

    p2 {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-size: 24px;
        color: blueviolet;
        text-align:center;
    }

    ul li {
        list-style-type:none;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-size: 20px;
        color: darkgoldenrod;
        text-align: center;
        text-decoration:none;
    }

    button {
        width: 75px;
        height: 75px;
        font-size: 50px;
    }

        button.sm {
            display: inline-flex;
            width: 50px;
            height: 50px;
            justify-content: center;
            align-items: center;
            font-size: 20px;
        }

    .blocked {
        background-color: mediumvioletred;
    }
</style>

    <div class="row">
        <div class="col">
            <hr />
        </div>
    </div>
    <div class="row">
        <div class="col-6">
            <h1 style="text-align:end">Add to Holding:</h1>
        </div>
        <div class="col-1">
            <button @onclick="@(() => Game.AddToHolding("cat"))"
                    type="button" class="sm btn btn-outline-dark">
                <h2>🐱</h2>
            </button>
        </div>
        <div class="col-1">
            <button @onclick="@(() => Game.AddToHolding("snake"))"
                    type="button" class="sm btn btn-outline-dark">
                <h2>🐍</h2>
            </button>
        </div>

        <div class="col-1">
            <button @onclick="@(() => Game.AddToHolding("grass"))"
                    type="button" class="sm btn btn-outline-dark">
                <h2>🌾</h2>
            </button>
        </div>
        <div class="col-1">
            <button @onclick="@(() => Game.AddToHolding("boulder"))"
                    type="button" class="sm btn btn-outline-dark">
                <h2>🪨</h2>
            </button>
        </div>

    </div>
    <div class="row">
        <div class="col">
            <hr />
        </div>
    </div>
    <div class="row">
        <div class="col-6">
            <h5 style="text-align:end">Holding Pen:</h5>
        </div>
        <div class="col-6">
            <button disabled type="button" class="btn btn-outline-dark">
                <h2>@Game.holdingPen.emoji<sup>@Game.holdingPen.rtLabel</sup></h2>
            </button>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <hr />
        </div>
    </div>
<div class="container">
    <div class="turn-count">
        <h1>Turn(s): @turnCount</h1>
        <h3>Win:@Game.winCount --- @Game.loseCount:Lose</h3>
    </div>
    @if (Game.gameEnd)
    {
        <div class="end-message">
            @if (Game.gameWin)
            {
                <h1>You Win The Game!</h1>
                <p2>Press Y to Restart the game</p2>
            }
            else
            {
                <h1>You Lose The Game!</h1>
                <p2>Press Y to Restart the game</p2>
            }
        </div>
    }
    <div class="row">
        <div class="col">
            <table align="center">
                @for (var y = 0; y < Game.numCellsY; y++)
                {
                    <tr>
                        @for (var x = 0; x < Game.numCellsX; x++)
                        {
                            if (y < Game.animalZones.Count && x < Game.animalZones[y].Count)
                            {
                                var zone = Game.animalZones[y][x];
                                string blockedClass = zone.IsBlocked ? "blocked" : "";
                                <td>
                                    <button @onclick="@(() => OnZoneClick(zone))"
                                            type="button" class="btn btn-outline-dark @blockedClass">
                                        @if (zone.occupant != null)
                                        {
                                            <h2>@zone.emoji</h2>
                                        }
                                        else
                                        {
                                            <h2></h2>
                                        }
                                    </button>
                                </td>
                            }
                        }
                    </tr>
                }
            </table>

        </div>
    </div>

    <div class="row">
        <div class="col">
            <hr />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <h3>Welcome to ZooManager!</h3>
            <h4> Game Introduction:</h4>
            <p>Players must eliminate all rats and insects within 20 rounds in order to establish a pristine zoo environment.</p>
            <br />
            <h4>Game Animals and Objects Introduction:</h4>
            <ul>
                    <li>
                        <p><strong>Cat:</strong> 🐱</p>
                        <ul>
                        <li>🐱 eats 🐭 </li>
                        <li>🐱 killed by 🐞</li>
                        <li>🐱 scared by 🐍</li>
                        <li>🐱 dead spawn 🌾 with percentage</li>
                        <li>🐱 bloked by 🪨 with retreat 1 more grid</li>

                        </ul>
                        </li>
                    <li>
                        <p><strong>Mouse:</strong>🐭</p>
                        <ul>
                        <li>🐭 eats 🌾</li>
                        <li>🐭 killed by 🐱 </li>
                        <li>🐭 dead spawn 🐞 with percentage chance</li>
                        <li>🐭 blocked by boulder 🪨</li>
                        <li>🐭 scares 🐍</li>

                        </ul>
                        </li>
                    <li>
                        <p><strong>Insect:</strong>🐞</p>
                        <ul>
                        <li>🐞 kills 🐱 within 2 grids </li>
                        <li>🐞 killed by 🐍 </li>
                        <li>🐞 Insect is killed by 🪨, but has a 50% chance of resurrecting at a random location on the map. </li>
                        <li>🐞 spawn if 🐭 dead </li>
                        <li>🐞 pass trhough 🌾 </li>


                        </ul>
                        </li>
                    <li>
                        <p><strong>Snake:</strong>🐍</p>
                        <ul>
                        <li>🐍 eats 🐞</li>
                        <li>🐍 scares 🐱</li>
                        <li>🐍 scared by 🐭</li>
                        <li>🐍 passes through 🪨 and 🌾</li>
                        <li>🐍 kills 🐞 spawn 🌾 with percentage </li>

                        </ul>
                        </li>
                    <li>
                        <p><strong>Grass:</strong>🌾</p>
                        <ul>
                        <li>🌾replaced by 🪨 </li>
                        </ul>
                        </li>
                    <li>
                        <p><strong>Boulder:</strong>🪨</p>
                    <ul>
                        <li>🪨 replaces 🌾 </li>
                    </ul>
                        </li>
            </ul>
    </div>
</div>
</div>
@code {
    public int turnCount = 20;
    private DotNetObjectReference<Index> objRef;
    private Game game;

    // Ref:https://learn.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/call-javascript-from-dotnet?view=aspnetcore-8.0
    // Ref: https://learn.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/?view=aspnetcore-8.0
    protected override async Task OnInitializedAsync()
    {
        objRef = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("keydownListener.listen", objRef);
        game = new Game(); 
    }
    private void OnZoneClick(Zone zone)
    {
        if (!Game.gameEnd)
        {
            Game.ZoneClick(zone);
            IncrementTurnCount();
        }
    }

    private void IncrementTurnCount()
    {
        turnCount--;
        Game.endTurn();

        // After ending the turn, activate all animals
        Console.WriteLine("Start to activate all animals...");
        Game.ActivateAnimals();
        Console.WriteLine("Activate all animals...");
        Game.turnCount = turnCount;
        StateHasChanged();
    }

    // Ref:https://learn.microsoft.com/zh-cn/aspnet/core/blazor/javascript-interoperability/call-dotnet-from-javascript?view=aspnetcore-8.0
    [JSInvokable]
    // Play can input key to restart the game
    public async Task OnKeyPress(string key)
    {
        if (Game.gameEnd && (key == "y" || key == "Y"))
        {
            Game.resetGame();
            turnCount = 20;  
            await InvokeAsync(StateHasChanged);  
            Console.WriteLine("Game Loading...");
        }
    }
}
