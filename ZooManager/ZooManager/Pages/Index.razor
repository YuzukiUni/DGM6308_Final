@page "/"
@using ZooManager
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<style>
    body {
        background-color: aliceblue;
    }

    h3 {
        font-size: 32px;
        color: #3388bb;
    }

    h4 {
        font-size: 28px;
        color: darkcyan;
    }

    p {
        font-size: 24px;
        color: blueviolet
    }

    button {
        width: 75px;
        height: 75px;
        font-size: 50px;
    }

        button.sm {
            display: inline-flex;
            width: 50px;
            height: 50px;
            justify-content: center;
            align-items: center;
            font-size: 20px;
        }

    .blocked {
        background-color: mediumvioletred;
    }
</style>
<div class="container">
    <div class="turn-count">
        <h1>Turn(s): @turnCount</h1>
    </div>
    @if (Game.gameEnd)
    {
        <div class="end-message">
            @if (Game.gameWin)
            {
                <h1>You Win The Game!</h1>
                <p>Press Y to Restart the game</p>
            }
            else
            {
                <h1>You Lose The Game!</h1>
                <p>Press Y to Restart the game</p>
            }
        </div>
    }


    <div class="row">
        <div class="col">
            <hr />
        </div>
    </div>
    <div class="row">
        <div class="col-6">
            <h1 style="text-align:end">Add to Holding:</h1>
        </div>
        <div class="col-1">
            <button @onclick="@(() => Game.AddToHolding("cat"))"
                    type="button" class="sm btn btn-outline-dark">
                <h2>🐱</h2>
            </button>
        </div>
        <div class="col-1">
            <button @onclick="@(() => Game.AddToHolding("snake"))"
                    type="button" class="sm btn btn-outline-dark">
                <h2>🐍</h2>
            </button>
        </div>

        <div class="col-1">
            <button @onclick="@(() => Game.AddToHolding("grass"))"
                    type="button" class="sm btn btn-outline-dark">
                <h2>🌾</h2>
            </button>
        </div>
        <div class="col-1">
            <button @onclick="@(() => Game.AddToHolding("boulder"))"
                    type="button" class="sm btn btn-outline-dark">
                <h2>🪨</h2>
            </button>
        </div>

    </div>
    <div class="row">
        <div class="col">
            <hr />
        </div>
    </div>
    <div class="row">
        <div class="col-6">
            <h1 style="text-align:end">Holding Pen:</h1>
        </div><div class="col-6">
            <button disabled type="button" class="btn btn-outline-dark">
                <h2>@Game.holdingPen.emoji<sup>@Game.holdingPen.rtLabel</sup></h2>
            </button>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <hr />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <table align="center">
                @for (var y = 0; y < Game.numCellsY; y++)
                {
                    <tr>
                        @for (var x = 0; x < Game.numCellsX; x++)
                        {
                            if (y < Game.animalZones.Count && x < Game.animalZones[y].Count)
                            {
                                var zone = Game.animalZones[y][x];
                                string blockedClass = zone.IsBlocked ? "blocked" : "";
                                <td>
                                    <button @onclick="@(() => OnZoneClick(zone))"
                                            type="button" class="btn btn-outline-dark @blockedClass">
                                        @if (zone.occupant != null)
                                        {
                                            <h2>@zone.emoji</h2>
                                        }
                                        else
                                        {
                                            <h2></h2>
                                        }
                                    </button>
                                </td>
                            }
                        }
                    </tr>
                }
            </table>

        </div>
    </div>
    <div class="row">
        <div class="col">
            <hr />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <h3>Welcome to ZooManager!</h3>
            <h4> Game Introduction:</h4>
            <p>Players must eliminate all rats and insects within 20 rounds in order to establish a pristine zoo environment.</p>
            <br />
            <h4>Game Animals and Objects Introduction:</h4>
            <ul>
                <ul>
                    <li><p><strong>Cat:</strong> 🐱</p></li>
                    <li><p><strong>Mouse:</strong>🐭</p></li>
                    <li><p><strong>Insect:</strong>🐞</p></li>
                    <li><p><strong>Snake:</strong>🐍</p></li>
                    <li><p><strong>Grass:</strong>🌾</p></li>
                    <li><p><strong>Boulder:</strong>🪨</p></li>

                </ul>

            </ul>
    </div>
</div>
</div>
@code {
    public int turnCount = 20;
    private DotNetObjectReference<Index> objRef;
    private Game game;  

    protected override async Task OnInitializedAsync()
    {
        objRef = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("keydownListener.listen", objRef);
        game = new Game(); 
    }
    private void OnZoneClick(Zone zone)
    {
        if (!Game.gameEnd)
        {
            Game.ZoneClick(zone);
            IncrementTurnCount();
        }
    }

    private void IncrementTurnCount()
    {
        turnCount--;
        Game.turnCount = turnCount;
        StateHasChanged();
    }

    [JSInvokable]
    public async Task OnKeyPress(string key)
    {
        if (Game.gameEnd && (key == "y" || key == "Y"))
        {
            Game.resetGame();
            turnCount = 20;  // 重置回合数
            await InvokeAsync(StateHasChanged);  // 更新组件状态
            Console.WriteLine("Game Loading...");
        }
    }
}
